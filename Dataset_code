%load_ext autoreload
%autoreload 2
  
import os

project = "beneaththewater"
if os.path.isdir(project):
  !rm -rf {project}
!git clone https://github.com/hzxsunshine/beneaththewater.git

import beneaththewater

from beneaththewater.utils.data_preparation import get_uieb_data, setup_colab_env
get_uieb_data()
setup_colab_env()
!find . -type f -name '._*' -delete

from beneaththewater.configs.constants import path_to_data
from beneaththewater.utils.data_preparation import prepare_the_dataframe, prepare_challenge_dataframe
uieb_df = prepare_the_dataframe(path_to_data)
uieb_challenging_df = prepare_challenge_dataframe(path_to_data)

import torch
import clip
from PIL import Image
import pandas as pd
import numpy as np

device = "cuda" if torch.cuda.is_available() else "cpu"
model, preprocess = clip.load("ViT-B/32", device=device)


from beneaththewater.configs.constants import select_contrastive_pairs
pairs = select_contrastive_pairs(indices=None)
print(f"Current Pairs are: ", pairs)

temp_raw = uieb_df["raw"]

import pandas as pd

pair_names = [name for pair in pairs for name in (f"{pair}_1", f"{pair}_2")]

data = []
image_names = []

for img_path in temp_raw:
    image = preprocess(Image.open(img_path)).unsqueeze(0).to(device)
    text = clip.tokenize(np.ravel(pairs)).to(device)

    with torch.no_grad():
        logits_per_image, _ = model(image, text)
        logits_per_image = logits_per_image.view(17, 2)
        probs = logits_per_image.softmax(dim=-1).cpu().numpy()

        data.append(probs.flatten())
        image_names.append(img_path)

# Create a DataFrame
df = pd.DataFrame(data, columns=pair_names, index=image_names)

# Save to CSV
df.to_csv('image_pair_probabilities_raw.csv')

temp_ref = uieb_df["reference"]

import pandas as pd

# Generate 34 unique column names (2 for each of the 17 pairs)
pair_names = [name for pair in pairs for name in (f"{pair}_1", f"{pair}_2")]

data = []
image_names = []

for img_path in temp_ref:
    image = preprocess(Image.open(img_path)).unsqueeze(0).to(device)
    text = clip.tokenize(np.ravel(pairs)).to(device)

    with torch.no_grad():
        logits_per_image, _ = model(image, text)
        logits_per_image = logits_per_image.view(17, 2)
        probs = logits_per_image.softmax(dim=-1).cpu().numpy()

        data.append(probs.flatten())
        image_names.append(img_path)

# Create a DataFrame
df = pd.DataFrame(data, columns=pair_names, index=image_names)

# Save to CSV
df.to_csv('image_pair_probabilities_reference.csv')

